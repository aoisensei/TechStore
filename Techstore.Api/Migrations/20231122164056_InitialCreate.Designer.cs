// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Techstore.Infrastructure.Data;

#nullable disable

namespace Techstore.Api.Migrations
{
    [DbContext(typeof(TechStoreDbContext))]
    [Migration("20231122164056_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Techstore.Domain.Entities.Brand", b =>
                {
                    b.Property<string>("brand_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("brand_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("brand_id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Category", b =>
                {
                    b.Property<string>("category_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("category_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Order", b =>
                {
                    b.Property<string>("order_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("order_date")
                        .HasColumnType("datetime2");

                    b.Property<double>("total_price")
                        .HasColumnType("float");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("order_id");

                    b.HasIndex("user_id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.OrderItem", b =>
                {
                    b.Property<string>("order_item_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("order_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("quantity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("order_item_id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_id");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Product", b =>
                {
                    b.Property<string>("product_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("brand_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("category_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("product_img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("product_id");

                    b.HasIndex("brand_id");

                    b.HasIndex("category_id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.User", b =>
                {
                    b.Property<string>("user_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Order", b =>
                {
                    b.HasOne("Techstore.Domain.Entities.User", "user")
                        .WithMany("ds_order")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Techstore.Domain.Entities.Order", "order")
                        .WithMany("ds_orderItem")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Techstore.Domain.Entities.Product", "product")
                        .WithMany("ds_orderItem")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Product", b =>
                {
                    b.HasOne("Techstore.Domain.Entities.Brand", "brand")
                        .WithMany("ds_product")
                        .HasForeignKey("brand_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Techstore.Domain.Entities.Category", "category")
                        .WithMany("ds_product")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("brand");

                    b.Navigation("category");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Brand", b =>
                {
                    b.Navigation("ds_product");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Category", b =>
                {
                    b.Navigation("ds_product");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Order", b =>
                {
                    b.Navigation("ds_orderItem");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.Product", b =>
                {
                    b.Navigation("ds_orderItem");
                });

            modelBuilder.Entity("Techstore.Domain.Entities.User", b =>
                {
                    b.Navigation("ds_order");
                });
#pragma warning restore 612, 618
        }
    }
}
